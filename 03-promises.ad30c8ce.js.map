{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAaC,SAASC,cAAc,kBACpCC,EAAYF,SAASC,cAAc,iBACnCE,EAAcH,SAASC,cAAc,mBAG3C,SAASG,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAGtC,OAFAH,GAASP,EAAWW,MAAQL,EAAWC,EACvCD,GAAY,EACL,IAAIM,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLP,EACFK,EAAQ,C,SAAEP,E,MAAUC,IAGpBO,EAAO,C,SAAER,E,MAAUC,GAAQ,GAG5BP,EAAWW,MAAM,G,CAfNV,SAASC,cAAc,UAmB/Bc,iBAAiB,SAAS,KAClCC,MAAMC,iBACN,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAYO,MAAOQ,GAAK,EAC1CJ,YAAW,KACTV,EAAcc,EAAGhB,EAAUQ,OACxBS,MAAK,EAACd,SAAEA,EAAQC,MAAEA,MACjBc,EAAAvB,GAASwB,OAAOC,QACd,qBAAqBjB,QAAeC,MACrC,IAGFiB,OAAM,EAAClB,SAAEA,EAAQC,MAAEA,MAClBc,EAAAvB,GAASwB,OAAOG,QAAQ,oBAAoBnB,QAAeC,MAAU,GAErE,IACFP,EAAWW,MAAQQ,EAAIhB,EAAUQ,MAAM","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delayInput = document.querySelector(`[name=\"delay\"]`);\nconst stepInput = document.querySelector(`[name=\"step\"]`);\nconst amountInput = document.querySelector(`[name=\"amount\"]`);\nconst submitBtn = document.querySelector(`button`);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  delay = +delayInput.value + position * delay;\n  position += 1;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        // Reject\n      }\n    }, delayInput.value);\n  });\n}\n\nsubmitBtn.addEventListener(`click`, () => {\n  event.preventDefault();\n  for (let i = 0; i < amountInput.value; i += 1) {\n    setTimeout(() => {\n      createPromise(i, stepInput.value)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `Fulfilled promise ${position} in ${delay}ms`\n          );\n          // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n          // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }, +delayInput.value + i * stepInput.value);\n  }\n});\n\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       resolve({ position, delay });\n//       // Fulfill\n//     } else {\n//       reject({ position, delay });\n//       // Reject\n//     }\n//   });\n// }\n\n// submitBtn.addEventListener(`click`, () => {\n//   event.preventDefault();\n\n//   for (let i = 0; i < amount.value; i += 1) {\n//     setTimeout(() => {\n//       console.log(+delay.value + i * step.value);\n//       let stepTime = +delay.value + i * step.value;\n//       createPromise(delay.value, step.value)\n//         .then(({ position, delay }) =>\n//           console.log(`✅ Fulfilled promise ${i + 1} in ${stepTime}ms`)\n//         )\n//         .catch(({ position, delay }) =>\n//           console.log(`❌ Rejected promise ${i + 1} in ${stepTime}ms`)\n//         );\n//     }, +delay.value + i * step.value);\n//   }\n// });\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$delayInput","document","querySelector","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","value","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.ad30c8ce.js.map"}